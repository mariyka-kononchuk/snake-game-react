{"version":3,"sources":["components/StatusBar/StatusBar.js","components/NameForm/NameForm.js","components/GameOver/GameOver.js","components/Cell/Cell.js","components/Grid/Grid.js","components/App/App.js","index.js","components/StatusBar/StatusBar.module.css","components/NameForm/NameForm.module.css","components/GameOver/GameOver.module.css","components/Cell/Cell.module.css"],"names":["maxScore","topPlayers","JSON","parse","localStorage","getItem","topScores","player","push","score","Math","max","bestResult","StatusBar","name","className","s","bar","wrapper","high_score","NameForm","state","handleChange","e","setState","target","value","handleSubmit","preventDefault","props","onCreateNewPlayer","reset","status","this","onSubmit","form","label","title","input","type","onChange","pattern","required","button","Component","GameOver","onRestart","game_over","subtitle","onClick","Cell","cellClassName","blankCell","snakeCell","fruitCell","classNames","cell","Grid","displayRows","rows","map","row","style","width","padding","margin","App","FIELD_SIZE","initialRows","i","k","randomPosition","x","floor","random","y","useState","setName","speed","setSpeed","setStatus","setScore","data","players","setPlayers","setRows","snake","setSnake","direction","setDirection","food","setFood","callback","delay","savedCallback","useRef","useEffect","current","id","setInterval","clearInterval","useInterval","moveSnake","document","addEventListener","keyCode","displaySnake","newRows","forEach","newSnake","countingPoints","pop","onGameOver","setItem","stringify","console","log","length","ReactDOM","render","StrictMode","querySelector","module","exports"],"mappings":"4ZAgBMA,EAba,WACjB,IAAMC,EAAaC,KAAKC,MAAMC,aAAaC,QAAQ,YACnD,GAAIJ,EAAY,CACd,IADc,EACRK,EAAY,GADJ,cAEOL,GAFP,IAEd,2BAAiC,CAAC,IAAvBM,EAAsB,QAC/BD,EAAUE,KAAKD,EAAOE,QAHV,8BAMd,OADiBC,KAAKC,IAAL,MAAAD,KAAYJ,GAG/B,OAAO,EAGQM,GAcFC,EAZG,SAAC,GAAoB,IAAlBJ,EAAiB,EAAjBA,MAAOK,EAAU,EAAVA,KACxB,OACE,qBAAKC,UAAWC,IAAEC,IAAlB,SACE,sBAAKF,UAAWC,IAAEE,QAAlB,UACE,oBAAGH,UAAWC,IAAEF,KAAhB,mBAA6BA,KAC7B,oBAAGC,UAAWC,IAAEP,MAAhB,mBAA8BA,KAC9B,oBAAGM,UAAWC,IAAEG,WAAhB,wBAAwCnB,W,gDCkCnCoB,E,4MArDXC,MAAQ,CACJP,KAAM,I,EAGVQ,aAAe,SAAAC,GACX,EAAKC,SAAS,CACVV,KAAMS,EAAEE,OAAOC,S,EAKvBC,aAAe,SAAAJ,GACXA,EAAEK,iBACF,EAAKJ,SAAS,CACVV,KAAMS,EAAEE,OAAOC,QAEnB,EAAKG,MAAMC,kBAAkB,EAAKT,OAClC,EAAKU,S,EAGTA,MAAQ,WACJ,EAAKP,SAAS,CAAEV,KAAM,KACtB,EAAKU,SAAS,CAAEQ,OAAQ,M,4CAG5B,WACI,IAAOlB,EAAQmB,KAAKZ,MAAbP,KAEP,OACI,uBAAMoB,SAAUD,KAAKN,aAAcZ,UAAWC,IAAEmB,KAAhD,UACI,wBAAOpB,UAAWC,IAAEoB,MAApB,UACI,sBAAMrB,UAAWC,IAAEqB,MAAnB,6BACA,uBACItB,UAAWC,IAAEsB,MACbC,KAAK,OACLzB,KAAK,OACLY,MAAOZ,EACP0B,SAAUP,KAAKX,aACfmB,QAAQ,yHACRJ,MAAM,kcACNK,UAAQ,OAGhB,wBAAQ3B,UAAWC,IAAE2B,OAAQJ,KAAK,SAAlC,+B,GA5COK,a,gBCSRC,EAVE,SAAC,GAA0B,IAAxBpC,EAAuB,EAAvBA,MAAOqC,EAAgB,EAAhBA,UACvB,OACI,sBAAK/B,UAAWC,IAAE+B,UAAlB,UACI,oBAAIhC,UAAWC,IAAEqB,MAAjB,uBACA,oBAAGtB,UAAWC,IAAEgC,SAAhB,yBAAuCvC,KACvC,wBAAQM,UAAWC,IAAE2B,OAAQJ,KAAK,SAASU,QAAS,kBAAKH,KAAzD,8B,iCCJG,SAASI,EAAT,GAAwB,IAC/BC,EACJ,OAFkC,EAAPZ,MAGzB,IAAK,QACHY,EAAgBnC,IAAEoC,UAClB,MAEF,IAAK,QACHD,EAAgBnC,IAAEqC,UAClB,MAEF,IAAK,OACHF,EAAgBnC,IAAEsC,UAMtB,OACE,qBAAKvC,UAAWwC,IAAWvC,IAAEwC,KAAML,KCpB1B,SAASM,EAAT,GAAyB,IAE9BC,EAF6B,EAARC,KAEFC,KAAI,SAAAC,GAAG,OAC5B,6BACKA,EAAID,KAAI,SAAArC,GACL,OAAQA,GACJ,IAAK,QACD,OAAO,cAAC2B,EAAD,CAAMX,KAAM,UACvB,IAAK,QACD,OAAO,cAACW,EAAD,CAAMX,KAAM,UACvB,IAAK,OACD,OAAO,cAACW,EAAD,CAAMX,KAAM,SACvB,QACI,OAAO,cAM5B,OACC,mCACI,oBAAIuB,MAAO,CAACC,MAAM,QAASC,QAAQ,MAAOC,OAAO,OAAQlD,UAAU,SAAnE,SACM2C,MChBC,SAASQ,IAKxB,IAHA,IAAMC,EAAW,GAEbC,EAAc,GACVC,EAAE,EAAGA,EAAEF,EAAYE,IAAK,CAC5BD,EAAY5D,KAAK,IACjB,IAAI,IAAI8D,EAAE,EAAGA,EAAEH,EAAYG,IACvBF,EAAYC,GAAG7D,KAAK,SAI5B,IAAM+D,EAAiB,WAInB,MAHiB,CACbC,EAAG9D,KAAK+D,MAAM/D,KAAKgE,SAASP,GAC5BQ,EAAGjE,KAAK+D,MAAM/D,KAAKgE,SAASP,KAGpC,EAAwBS,mBAAS,IAAjC,mBAAO9D,EAAP,KAAa+D,EAAb,KACA,EAA0BD,mBAAS,KAAnC,mBAAOE,EAAP,KAAcC,EAAd,KACA,EAA4BH,mBAAS,SAArC,mBAAO5C,EAAP,KAAegD,EAAf,KACA,EAA0BJ,mBAAS,GAAnC,mBAAOnE,EAAP,KAAcwE,EAAd,KAEA,EAA8BL,mBAASM,GAAvC,mBAAOC,EAAP,KAAgBC,EAAhB,KACA,EAAwBR,mBAASR,GAAjC,mBAAOT,EAAP,KAAa0B,EAAb,KACA,EAA0BT,mBAAS,CAAC,CAACJ,EAAE,EAAEG,EAAE,GAAG,CAACH,EAAE,EAAEG,EAAE,KAArD,mBAAOW,EAAP,KAAcC,EAAd,KACA,EAAkCX,mBAAS,SAA3C,mBAAOY,EAAP,KAAkBC,EAAlB,KACA,EAAwBb,mBAASL,GAAjC,mBAAOmB,EAAP,KAAaC,EAAb,MAiIA,SAAqBC,EAAUC,GAC3B,IAAMC,EAAgBC,mBAGtBC,qBAAU,WACRF,EAAcG,QAAUL,IACvB,CAACA,IAGJI,qBAAU,WAIR,GAAc,OAAVH,EAAgB,CAClB,IAAIK,EAAKC,aAJX,WACEL,EAAcG,YAGaJ,GAC3B,OAAO,kBAAMO,cAAcF,OAE5B,CAACL,IAxILQ,EAAY,WACTC,MAES,SAAVtE,EAAmB8C,EAAQ,MAiChCyB,SAASC,iBAAiB,WA9BM,SAACjF,GAE3B,OADgBA,EAAZkF,SAEF,KAAK,GACGhB,EAAa,QACb,MACR,KAAK,GACGA,EAAa,OACb,MACR,KAAK,GACCA,EAAa,SACb,MACN,KAAK,GACCA,EAAa,UACjB,MACF,KAAK,GACL,GAAe,SAAXzD,EAEF,YADAgD,EAAU,SAGZ,GAAe,UAAXhD,EAEF,YADAgD,EAAU,YAS0C,GAE9D,IAAM0B,EAAe,WACjB,IAAMC,EAAUvC,EAChBkB,EAAMsB,SAAQ,SAAApD,GACZmD,EAAQnD,EAAKgB,GAAGhB,EAAKmB,GAAG,WAE1BgC,EAAQjB,EAAKlB,GAAGkB,EAAKf,GAAG,OACxBU,EAAQsB,IAGNL,EAAY,WACd,IAAMO,EAAW,GACjB,OAAOrB,GACL,IAAK,QACCqB,EAASrG,KAAK,CAACgE,EAAGc,EAAM,GAAGd,EAAGG,EAAIW,EAAM,GAAGX,EAAI,IAC/C,MACJ,IAAK,OACDkC,EAASrG,KAAK,CAACgE,EAAGc,EAAM,GAAGd,EAAGG,EAAIW,EAAM,GAAGX,EAAI,IAC/C,MACJ,IAAK,MACDkC,EAASrG,KAAK,CAACgE,EAAIc,EAAM,GAAGd,EAAI,EAAKG,EAAGW,EAAM,GAAGX,IACjD,MACJ,IAAK,SACDkC,EAASrG,KAAK,CAAEgE,EAAIc,EAAM,GAAGd,EAAI,EAAKG,EAAGW,EAAM,GAAGX,IAClD,MACJ,QACI,OAERW,EAAMsB,SAAQ,SAAApD,GACVqD,EAASrG,KAAKgD,MAEd8B,EAAM,GAAGd,IAAMkB,EAAKlB,GAAKc,EAAM,GAAGX,IAAMe,EAAKf,GAC/CgB,EAAQpB,GAEVuC,KAEGD,EAASE,MAEZxB,EAASsB,GACTH,KAgBII,EAAgB,WACpB7B,EAASxE,EAAM,KAGXuG,EAAa,WACjBhC,EAAU,aACVO,EAAS,CAAC,CAAEf,EAAG,EAAGG,EAAG,GAAK,CAAEH,EAAG,EAAGG,EAAG,KAKrCS,EAAW,CAJI,CACbtE,OACAL,UAEQ,mBAAa0E,KACvB/E,aAAa6G,QAAQ,UAAW/G,KAAKgH,UAAU/B,KAmC/C,OA1BFa,qBAAU,WACNmB,QAAQC,IAAI,SAlCX9B,EAAM,GAAGd,IAAMc,EAAMA,EAAM+B,OAAS,GAAG7C,GAAKc,EAAM,GAAGX,IAAMW,EAAMA,EAAM+B,OAAS,GAAG1C,GACrFqC,KAKG1B,EAAM,GAAGd,GAAKL,GAAamB,EAAM,GAAGX,GAAMR,GAAcmB,EAAM,GAAGd,EAAI,GAAKc,EAAM,GAAGX,EAAK,IAC1FqC,MA8BD,CAAC1B,IAsBa,UAAXtD,EAEA,mCACG,cAAC,EAAD,CAAUF,kBArJrB,YAAqC,IAAThB,EAAQ,EAARA,KAC1B+D,EAAQ/D,GACRkE,EAAU,SACVC,EAAS,GACTyB,SAsJiB,SAAX1E,GAAgC,UAAXA,EAErB,qCACE,cAAC,EAAD,CAAWvB,MAAOA,EAAOK,KAAMA,EAAMkB,OAAQA,IAC7C,qBAAKjB,UAAU,YAAf,SACE,cAAC0C,EAAD,CAAME,KAAMA,SAKL,cAAX3B,EAEA,mCACE,cAAC,EAAD,CAAUvB,MAAOA,EAAOqC,UAtDZ,WAClB+B,EAAQ,IAERE,EAAS,KACTC,EAAU,mBA+CV,ECpMJsC,IAASC,OACP,cAAC,IAAMC,WAAP,UACE,cAACtD,EAAD,MAEFqC,SAASkB,cAAc,W,kBCVzBC,EAAOC,QAAU,CAAC,IAAM,uBAAuB,QAAU,2BAA2B,KAAO,wBAAwB,MAAQ,yBAAyB,WAAa,gC,kBCAjKD,EAAOC,QAAU,CAAC,KAAO,uBAAuB,MAAQ,wBAAwB,MAAQ,wBAAwB,MAAQ,wBAAwB,OAAS,2B,kBCAzJD,EAAOC,QAAU,CAAC,UAAY,4BAA4B,MAAQ,wBAAwB,SAAW,2BAA2B,OAAS,2B,kBCAzID,EAAOC,QAAU,CAAC,UAAY,wBAAwB,UAAY,wBAAwB,UAAY,2B","file":"static/js/main.c116205b.chunk.js","sourcesContent":["import React from 'react';\r\nimport s from './StatusBar.module.css';\r\n\r\nconst bestResult = () => {\r\n  const topPlayers = JSON.parse(localStorage.getItem(\"players\"));\r\n  if (topPlayers) {\r\n    const topScores = [];\r\n    for (const player of topPlayers) {\r\n      topScores.push(player.score);\r\n    }\r\n    const maxScore = Math.max(...topScores)\r\n    return maxScore;\r\n  }\r\n  return 0;\r\n}\r\n\r\nconst maxScore = bestResult();\r\n\r\nconst StatusBar = ({ score, name}) => {\r\n    return (\r\n      <div className={s.bar}>\r\n        <div className={s.wrapper}>\r\n          <p className={s.name}>Name: {name}</p>\r\n          <p className={s.score}>Score:{score}</p>\r\n          <p className={s.high_score}>High-score:{maxScore}</p>\r\n        </div>\r\n      </div>\r\n  )\r\n};\r\n\r\nexport default StatusBar;","import React, { Component } from 'react';\r\nimport PropTypes from 'prop-types';\r\nimport s from './NameForm.module.css';\r\n\r\nclass NameForm extends Component {\r\n    state = {\r\n        name: ''\r\n    }\r\n\r\n    handleChange = e => {\r\n        this.setState({\r\n            name: e.target.value,\r\n        });\r\n        \r\n    }\r\n\r\n    handleSubmit = e => {\r\n        e.preventDefault();\r\n        this.setState({\r\n            name: e.target.value,\r\n        });\r\n        this.props.onCreateNewPlayer(this.state);\r\n        this.reset();\r\n    }\r\n\r\n    reset = () => {\r\n        this.setState({ name: '' });\r\n        this.setState({ status: ''});\r\n    }\r\n\r\n    render() {\r\n        const {name} = this.state;\r\n        \r\n        return (\r\n            <form onSubmit={this.handleSubmit} className={s.form}>\r\n                <label className={s.label}>\r\n                    <span className={s.title}>Enter your name</span>\r\n                    <input\r\n                        className={s.input}\r\n                        type=\"text\"\r\n                        name=\"name\"\r\n                        value={name}\r\n                        onChange={this.handleChange}\r\n                        pattern=\"^[a-zA-Zа-яА-Я]+(([' -][a-zA-Zа-яА-Я ])?[a-zA-Zа-яА-Я]*)*$\"\r\n                        title=\"Имя может состоять только из букв, апострофа, тире и пробелов. Например Adrian, Jacob Mercer, Charles de Batz de Castelmore d'Artagnan и т. п.\"\r\n                        required\r\n                    />\r\n                </label>\r\n                <button className={s.button} type=\"submit\">Begin game</button>\r\n            </form>\r\n        )\r\n    }\r\n}\r\n\r\nNameForm.propTypes = {\r\n    onCreateNewPlayer: PropTypes.func,\r\n};\r\n\r\nexport default NameForm;","import React from 'react';\r\nimport s from './GameOver.module.css';\r\n\r\nconst GameOver = ({ score, onRestart }) => {\r\n    return (\r\n        <div className={s.game_over}>\r\n            <h2 className={s.title}>GAME OVER</h2>\r\n            <p className={s.subtitle}>Your score: {score}</p>\r\n            <button className={s.button} type=\"button\" onClick={()=> onRestart()}>Restart game</button>\r\n        </div>\r\n    ) \r\n}\r\n\r\nexport default GameOver;","import React from 'react';\r\nimport s from './Cell.module.css';\r\nimport classNames from 'classnames';\r\n\r\nexport default function Cell ({type}) {\r\n    let cellClassName;\r\n    switch (type) {\r\n      case 'blank': {\r\n        cellClassName = s.blankCell;\r\n        break;\r\n      }\r\n      case 'snake': {\r\n        cellClassName = s.snakeCell;\r\n        break;\r\n      }\r\n      case 'food': {\r\n        cellClassName = s.fruitCell;\r\n        break;\r\n        }\r\n      default:\r\n    }\r\n\r\n    return (\r\n      <div className={classNames(s.cell, cellClassName)}/>\r\n    );\r\n  };\r\n\r\n","import React from 'react';\r\nimport Cell from '../Cell';\r\n\r\nexport default function Grid({ rows }) {\r\n    \r\n    const displayRows = rows.map(row => \r\n        <li>\r\n            {row.map(e => {\r\n                switch (e) {\r\n                    case 'blank':\r\n                        return <Cell type={'blank'}  />;\r\n                    case 'snake':\r\n                        return <Cell type={'snake'} />;\r\n                    case 'food':\r\n                        return <Cell type={'food'} />;\r\n                    default:\r\n                        return null;\r\n                }\r\n            })}\r\n        </li>\r\n    );\r\n \r\n   return (\r\n    <>\r\n        <ul style={{width:'500px', padding:'0px', margin:'0px'}} className='img500'>\r\n            { displayRows }\r\n        </ul>\r\n    </>\r\n    )\r\n}\r\n\r\n","import React, { useState, useEffect, useRef } from 'react';\nimport data from '../../data/players.json'\n// import Snake from '../Snake';\n// import Food from '../Food';\nimport StatusBar from '../StatusBar';\nimport NameForm from '../NameForm';\nimport GameOver from '../GameOver';\nimport Grid from '../Grid';\n\nexport default function App() {\n\nconst FIELD_SIZE=10;\n  \nlet initialRows = [];\nfor(let i=0; i<FIELD_SIZE; i++) {\n    initialRows.push([]);\n    for(let k=0; k<FIELD_SIZE; k++) {\n        initialRows[i].push('blank');\n    }\n}\n\nconst randomPosition = () => {\n    const position = {\n        x: Math.floor(Math.random()*FIELD_SIZE),\n        y: Math.floor(Math.random()*FIELD_SIZE)};\n    return position;    \n}\nconst [name, setName] = useState(''); \nconst [speed, setSpeed] = useState(150); \nconst [status, setStatus] = useState('start');\nconst [score, setScore] = useState(0);\n// const [highScore, setHighScore] = useState(maxScore);\nconst [players, setPlayers] = useState(data);\nconst [rows, setRows] = useState(initialRows);\nconst [snake, setSnake] = useState([{x:5,y:4},{x:5,y:5}]);\nconst [direction, setDirection] = useState('right');\nconst [food, setFood] = useState(randomPosition);\n  \n\nfunction createNewPlayer ({ name }) {\n  setName(name);\n  setStatus('pause');\n  setScore(0);\n  displaySnake();\n}\n  \n   useInterval(() => {\n      moveSnake();\n    },\n     status ==='game' ? speed : null\n  );\n \nconst changeDirectionWithKeys = (e) => {\n    var { keyCode } = e;\n      switch (keyCode) {\n        case 37:\n                setDirection('left');\n                break;\n        case 38:\n                setDirection('top');\n                break;                   \n        case 39:\n              setDirection('right');\n              break;\n        case 40:\n              setDirection('bottom');\n          break;\n        case 32:\n        if (status === 'game') {\n          setStatus('pause')\n          return;\n        }\n        if (status === 'pause') {\n          setStatus('game')\n          return;\n        }\n        break;\n        default:\n            break;            \n          }\n    }\n    \ndocument.addEventListener(\"keydown\", changeDirectionWithKeys, false);\n\nconst displaySnake = () => {\n    const newRows = initialRows;\n    snake.forEach(cell => {\n      newRows[cell.x][cell.y]='snake';\n    })\n    newRows[food.x][food.y]='food';\n    setRows(newRows);\n}\n\nconst moveSnake = () => {\n    const newSnake = [];\n    switch(direction) {\n      case 'right':\n            newSnake.push({x: snake[0].x, y: (snake[0].y + 1)})\n            break;\n        case 'left':\n            newSnake.push({x: snake[0].x, y: (snake[0].y - 1 )})\n            break;\n        case 'top':\n            newSnake.push({x: (snake[0].x - 1 ), y: snake[0].y})\n            break;\n        case 'bottom':\n            newSnake.push({ x: (snake[0].x + 1) , y: snake[0].y })\n            break;\n        default:\n            return;\n    }\n    snake.forEach(cell => {\n        newSnake.push(cell);\n    })   \n    if (snake[0].x === food.x && snake[0].y === food.y) {\n      setFood(randomPosition);\n    //increaseSpeed();\n    countingPoints();\n    } else {\n       newSnake.pop();\n    }\n    setSnake(newSnake);\n    displaySnake();\n}\n \n  const checkIfCollapsed =()=> {\n   if (snake[0].x === snake[snake.length - 1].x && snake[0].y === snake[snake.length - 1].y) {\n     onGameOver();\n    }\n  }\n\n  const checkIfOutOfBorders =()=> {\n    if (snake[0].x >= FIELD_SIZE|| snake[0].y  >= FIELD_SIZE || snake[0].x < 0 || snake[0].y  < 0) {\n      onGameOver();\n      return;\n    }\n  }\n\n  const countingPoints =() => {\n    setScore(score+10)\n  }\n\n  const onGameOver = () => {\n    setStatus('game_over');\n    setSnake([{ x: 5, y: 4 }, { x: 5, y: 5 }]);\n    const player = {\n      name,\n      score\n    }\n    setPlayers([player, ...players])\n    localStorage.setItem('players', JSON.stringify(players))\n  }\n  const restartGame = () => {\n    setName('');\n    //setRows(initialRows)\n    setSpeed(150);\n    setStatus('start')\n  }\n\n  useEffect(() => {\n      console.log(\"check\");\n      checkIfCollapsed();\n      checkIfOutOfBorders();\n  }, [snake])\n\nfunction useInterval(callback, delay) {\n    const savedCallback = useRef();\n  \n    // Remember the latest callback.\n    useEffect(() => {\n      savedCallback.current = callback;\n    }, [callback]);\n  \n    // Set up the interval.\n    useEffect(() => {\n      function tick() {\n        savedCallback.current();\n      }\n      if (delay !== null) {\n        let id = setInterval(tick, delay);\n        return () => clearInterval(id);\n      }\n    }, [delay]);\n  }\n  \n    if (status === 'start') {\n      return (\n        <>\n           <NameForm onCreateNewPlayer={createNewPlayer} />\n        </>\n      )\n    }\n \n    if (status === 'game' || status === 'pause') {\n      return (\n        <>\n          <StatusBar score={score} name={name} status={status} />\n          <div className=\"game-area\">\n            <Grid rows={rows}/>\n          </div>\n        </>)\n    }\n    \n    if (status === 'game_over') {\n      return (\n        <>\n          <GameOver score={score} onRestart={restartGame}/>\n        </>)\n    }\n  \n}\n\n\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport 'modern-normalize/modern-normalize.css';\nimport './index.css';\nimport App from './components/App';\n\n//real DOM\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.querySelector('#root'),\n);\n","// extracted by mini-css-extract-plugin\nmodule.exports = {\"bar\":\"StatusBar_bar__HNv8u\",\"wrapper\":\"StatusBar_wrapper__2p79U\",\"name\":\"StatusBar_name__a3APu\",\"score\":\"StatusBar_score__3rnNU\",\"high_score\":\"StatusBar_high_score__3nc0T\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"form\":\"NameForm_form__3Nrv6\",\"label\":\"NameForm_label__2mvyq\",\"title\":\"NameForm_title__da_wE\",\"input\":\"NameForm_input__1hbdH\",\"button\":\"NameForm_button__2xi8l\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"game_over\":\"GameOver_game_over__1xNBM\",\"title\":\"GameOver_title__38Wo8\",\"subtitle\":\"GameOver_subtitle__3xbhX\",\"button\":\"GameOver_button__1GM6z\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"snakeCell\":\"Cell_snakeCell__dOSNM\",\"blankCell\":\"Cell_blankCell__nFpXh\",\"fruitCell\":\"Cell_fruitCell__dXwAu\"};"],"sourceRoot":""}